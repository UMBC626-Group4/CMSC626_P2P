from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.asymmetric import rsa
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.fernet import Fernet
from nodeconnection import node_connection

class node_connection_encryption(node_connection):

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.encryption_key_fernet = Fernet.generate_key()
        self.encryption_key_rsa = rsa.generate_private_key(
            public_exponent=65537,
            key_size=2048,
            backend=default_backend()
        )
        self.encryption_key_aes = secrets.token_bytes(32)  # 256-bit key

    def encrypt_data(self, data, encryption_algorithm='fernet'):
        try:
            if encryption_algorithm == 'fernet':
                fernet = Fernet(self.encryption_key_fernet)
                encrypted_data = fernet.encrypt(data)
            elif encryption_algorithm == 'rsa':
                public_key = self.encryption_key_rsa.public_key().public_bytes(
                    encoding=serialization.Encoding.PEM,
                    format=serialization.PublicFormat.SubjectPublicKeyInfo
                )
                cipher = self.encryption_key_rsa.public_key().encrypt(
                    data,
                    padding.OAEP(
                        mgf=padding.MGF1(algorithm=hashes.SHA256()),
                        algorithm=hashes.SHA256(),
                        label=None
                    )
                )
                encrypted_data = public_key + cipher
            elif encryption_algorithm == 'aes':
                cipher = Cipher(algorithms.AES(self.encryption_key_aes), modes.CFB, backend=default_backend())
                encryptor = cipher.encryptor()
                encrypted_data = encryptor.update(data) + encryptor.finalize()
            else:
                self.parent_node.debug_message(f"{self.connected_node_id}: Unknown encryption algorithm")
                return None

            return encrypted_data
        except Exception as e:
            self.parent_node.debug_message(f"Encryption error: {e}")
            return None

    def decrypt_data(self, encrypted_data, encryption_algorithm='fernet'):
        try:
            if encryption_algorithm == 'fernet':
                fernet = Fernet(self.encryption_key_fernet)
                decrypted_data = fernet.decrypt(encrypted_data)
            elif encryption_algorithm == 'rsa':
                public_key_size = self.encryption_key_rsa.public_key().key_size // 8
                public_key = encrypted_data[:public_key_size]
                cipher = encrypted_data[public_key_size:]
                decrypted_data = self.encryption_key_rsa.decrypt(
                    cipher,
                    padding.OAEP(
                        mgf=padding.MGF1(algorithm=hashes.SHA256()),
                        algorithm=hashes.SHA256(),
                        label=None
                    )
                )
            elif encryption_algorithm == 'aes':
                cipher = Cipher(algorithms.AES(self.encryption_key_aes), modes.CFB, backend=default_backend())
                decryptor = cipher.decryptor()
                decrypted_data = decryptor.update(encrypted_data) + decryptor.finalize()
            else:
                self.parent_node.debug_message(f"{self.connected_node_id}: Unknown encryption algorithm")
                return None

            return decrypted_data
        except Exception as e:
            self.parent_node.debug_message(f"Decryption error: {e}")
            return None

